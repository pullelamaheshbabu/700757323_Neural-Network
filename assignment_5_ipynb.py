# -*- coding: utf-8 -*-
"""Assignment-5 ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQvd0SsODSEfp6N1vhR27RyeBQNQhWaA
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report

# Load the dataset
glass_data = pd.read_csv("glass.csv")

# Split dataset into features and target variable
X = glass_data.drop('Type', axis=1)  # Features
y = glass_data['Type']  # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create Naïve Bayes classifier
nb_classifier = GaussianNB()

# Train Naïve Bayes classifier
nb_classifier.fit(X_train, y_train)

# Predict the response for test dataset
y_pred = nb_classifier.predict(X_test)

# Model evaluation
# Score
accuracy = nb_classifier.score(X_test, y_test)
print("Accuracy:", accuracy)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Load the dataset
glass_data = pd.read_csv("glass.csv")

# Split dataset into features and target variable
X = glass_data.drop('Type', axis=1)  # Features
y = glass_data['Type']  # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create Linear SVM classifier
svm_classifier = SVC(kernel='linear')

# Train Linear SVM classifier
svm_classifier.fit(X_train, y_train)

# Predict the response for test dataset
y_pred = svm_classifier.predict(X_test)

# Model evaluation
# Score
accuracy = svm_classifier.score(X_test, y_test)
print("Accuracy:", accuracy)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""'''What algorithm yielded the highest accuracy? Could you explain why?



You would compare the accuracy scores for the Naïve Bayes and Linear SVM algorithms returned by the score() method to determine which algorithm is more accurate. In this case, the algorithm with the higher accuracy would be deemed superior.


It's crucial to keep in mind, though, that the specifics of the dataset may influence the algorithm that is selected. Because of its simplicity and independence assumptions, Naïve Bayes may perform better in some situations, but SVM may perform better in others—particularly when the data is highly dimensional or the decision boundary is nonlinear. As a result, it's critical to assess the two methods and select the one that works best with the particular dataset.

"""