# -*- coding: utf-8 -*-
"""assignment_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/pullelamaheshbabu/700757323_Neural-Network/blob/main/assignment_4.ipynb
"""

# import modules
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# upload the file
file_name = 'data.csv'
# read the data_set
df = pd.read_csv(file_name)

# e. Aggregate at least two columns in the dataset using min, max, count, and mean functions
e = df.iloc[:, -2:].agg(['max', 'min', 'count', 'mean'])

# f.Filter the dataframe to retain only the rows with calorie values falling between 500 and 1000.
f = df[df['Calories'].between(500, 1000)]

# g. Filter the dataframe to choose rows where calorie values are greater than 500 and pulse values are less than 100.
g = df[(df['Calories'] > 500) & (df['Pulse'] < 100)]

# h.Generate a new dataframe named "df_modified" that includes all columns from the original dataframe "df" except for the column "Maxpulse."
df_modified = df.drop('Maxpulse', axis=1)

# i. Remove the "Maxpulse" column from the main dataframe "df."
df = df.drop(['Maxpulse'], axis=1)

# j. Change the data type of the "Calories" column to integer in the dataframe.
df['Calories'] = pd.to_numeric(df['Calories'], errors='coerce').fillna(0).astype(int)

# k. Using pandas create a scatter plot for the two columns (Duration and Calories).

df.plot(kind='scatter', x='Duration', y='Calories')

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# upload the file
file_name = 'Salary_Data.csv'
# a) read the data_set
df = pd.read_csv(file_name)

# b) convert the data into train_test partitions
train_data, test_data = train_test_split(df, test_size=1/3, random_state=42)

# c) Train and predict the model
X_train = train_data[['YearsExperience']]
y_train = train_data['Salary']

model = LinearRegression()
model.fit(X_train, y_train)

X_test = test_data[['YearsExperience']]
y_pred = model.predict(X_test)

# d) Calculate the mean_squared error
mse = mean_squared_error(test_data['Salary'], y_pred)
print(f"Mean Squared Error: {mse}")

# e) Visualize both train and test data using a scatter plot
plt.scatter(train_data['YearsExperience'], train_data['Salary'], label='Train Data')
plt.scatter(test_data['YearsExperience'], test_data['Salary'], label='Test Data', marker='x')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Train and Test Data with Regression Line')
plt.legend()
plt.show()